ggplot(ggnb, aes(x=x, y=y))+
geom_point(color = "cyan", alpha = 0.3, size =0.4)
ggplot(ggnb, aes(x=x, y=y))+
geom_point(color = "blue", alpha = 0.3, size =0.4)
ggplot(ggnb, aes(x=x, y=y))+
geom_point(color = "blue", alpha = 0.3, size =0.4)+
scale_x_discrete(limits = 0:10)+
xlab("Fitted values")+
ylab("Residuals")
ggtitle("Residuals vs fitted values")
ggplot(ggnb, aes(x=x, y=y))+
geom_point(color = "blue", alpha = 0.3, size =0.4)+
scale_x_discrete(limits = 0:150)+
xlab("Fitted values")+
ylab("Residuals")
ggtitle("Residuals vs fitted values")
?xlim
ggplot(ggnb, aes(x=x, y=y))+
geom_point(color = "blue", alpha = 0.3, size =0.4)+
xlim(0,50)+
xlab("Fitted values")+
ylab("Residuals")+
ggtitle("Residuals vs fitted values")
ggplot(ggnb, aes(x=x, y=y))+
geom_point(color = "blue", alpha = 0.3, size =0.4)+
xlim(0,30)+
xlab("Fitted values")+
ylab("Residuals")+
ggtitle("Residuals vs fitted values")
ggplot(ggnb, aes(x=x, y=y))+
geom_point(color = "blue", alpha = 0.3, size =0.9)+
xlim(0,30)+
xlab("Fitted values")+
ylab("Residuals")+
ggtitle("Residuals vs fitted values")
plot_resid_vs_fitted(fitted, residual){
ggplot(data.frame(x = fitted, y =residual), aes(x=x, y=y))+
geom_point(color = "blue", alpha = 0.3, size =0.9)+
xlim(0,30)+
xlab("Fitted values")+
ylab("Residuals")+
ggtitle("Residuals vs fitted values")
}
# Checking linearity
plot_resid_vs_fitted(nbmodel$fitted.values,nbmodel$residuals)
plot_resid_vs_fitted<- function(fitted, residual){
ggplot(data.frame(x = fitted, y =residual), aes(x=x, y=y))+
geom_point(color = "blue", alpha = 0.3, size =0.9)+
xlim(0,30)+
xlab("Fitted values")+
ylab("Residuals")+
ggtitle("Residuals vs fitted values")
}
# Checking linearity
plot_resid_vs_fitted(nbmodel$fitted.values,nbmodel$residuals)
plot_resid_vs_fitted<- function(fitted, residual){
ggplot(data.frame(x = fitted, y =residual), aes(x=x, y=y))+
geom_point(color = "blue", alpha = 0.4, size =0.7)+
xlim(0,30)+
xlab("Fitted values")+
ylab("Residuals")+
ggtitle("Residuals vs fitted values")
}
# Checking linearity
plot_resid_vs_fitted(nbmodel$fitted.values,nbmodel$residuals)
plot_resid_vs_fitted<- function(fitted, residual){
ggplot(data.frame(x = fitted, y =residual), aes(x=x, y=y))+
geom_point(color = "blue", alpha = 0.4, size =0.8)+
xlim(0,30)+
xlab("Fitted values")+
ylab("Residuals")+
ggtitle("Residuals vs fitted values")
}
checklinearity<- function(fitted, residual){
ggplot(data.frame(x = fitted, y =residual), aes(x=x, y=y))+
geom_point(color = "blue", alpha = 0.4, size =0.8)+
xlim(0,30)+
xlab("Fitted values")+
ylab("Residuals")+
ggtitle("Residuals vs fitted values")
}
# Checking linearity
checklinearity(nbmodel$fitted.values,nbmodel$residuals)
checkvariance <- function(fitted, residual){
checklinearity(fitted, abs(residual))
}
# Checking the variance
checkvariance(nbmodel$fitted.values,nbmodel$residuals)
# Checking the variance
checkvariance(nbmodel$fitted.values,nbmodel$residuals)
plot(nbmodel$residuals)
ggplot(Breakdowns, aes(x=Breakdowns))+
geom_bar(aes(y=..density..), alpha=0.4, position="identity", lwd=0.1)+
geom_density(alpha=0.3, lwd=1)+
xlab("Number of breakdowns")+
ggtitle("Repartition of Breakdowns")+
theme(text = element_text(size = 20))
library(ggplot2)
library("lme4")
library(MASS)
library(readr)
library(GGally)
library(DHARMa)
source(file = "Breakdowns/Breakdowns_functions.R")
?plotQQunif
library(ggplot2)
library("lme4")
library(MASS)
library(readr)
library(GGally)
library(DHARMa)
source(file = "Breakdowns/Breakdowns_functions.R")
# Loading data set --------------------------------------------------------
load("Breakdowns/Breakdowns.RData")
# Modify the data set so that it make sense --> explanations in "Breakdowns_functions.R"
df <- mBreakdowns()
dff <- mBreakdowns2()
Poissonfull2 <- glm(Breakdowns ~ Year + HGV + Slope + Limit + Traffic+ Length + Direction+
Urban + Type  + SlopeType + Tunnel + Company,
family="poisson", data=dff)
model2 <- step(Poissonfull2, direction = 'backward')
# Output : Step:  AIC=Inf
# Breakdowns ~ Year + HGV + Slope + Limit + Traffic + Length +
# Direction + Urban + Type + SlopeType + Tunnel
# Residual deviance:  297.96  on  937  degrees of freedom
# summary(model2)
# Here we do a simple check
simResids <- simulateResiduals(model2)
plot(simResids)
plotQQunif(simResids)
library(ggplot2)
library('lme4')
library(MASS)
library(readr)
library(GGally)
library(boot)
source(file = "Breakdowns/Breakdowns_functions.R")
# Loading data set --------------------------------------------------------
load("Breakdowns/Breakdowns.RData")
dfnb <- mBreakdowns2nb()
library(ggplot2)
library('lme4')
library(MASS)
library(readr)
library(GGally)
library(boot)
source(file = "Breakdowns/Breakdowns_functions.R")
# Loading data set --------------------------------------------------------
load("Breakdowns/Breakdowns.RData")
# Modify the data set so that it make sense --> explanations in "Breakdowns_functions.R"
df <- mBreakdowns()
dff <- mBreakdowns2()
dfnb <- mBreakdowns2nb()
# Negative binomial model -------------------------------------------------
nbmodel <- glm.nb(Breakdowns ~ Tunnel + Slope + Direction + Year + HGV, data = dfnb)
plot(nbmodel$fitted.values,nbmodel$residuals)
glm.diag.plots(nbmodel)
# Checking linearity
checklinearity(nbmodel$fitted.values,nbmodel$residuals)
# Checking the variance
checkvariance(nbmodel$fitted.values,nbmodel$residuals)
# QQ-plot --> to change !
qqplot(nbmodel)
source(file = "Breakdowns/Breakdowns_functions.R")
source(file = "Breakdowns/Breakdowns_functions.R")
# QQ-plot --> to change !
qqplot(nbmodel)
plot(nbmodel$fitted.values,nbmodel$residuals)
glm.diag.plots(nbmodel)
plot(nbmodel$fitted.values,nbmodel$residuals)
source("~/AEPFL/Master/Ma1/Regression_methods/Projet 1/regression-methods/Fires/Fires_models_Celine.R", echo=TRUE)
m1 <- glm(Fires ~ Traffic + HGV + Length, family="poisson", data=dff)
summary(m1)
# Residual deviance: 78.182  on 166  degrees of freedom no more over dispersion but...
# AIC: Inf --> This is also a problem...
simResids <- simulateResiduals(m1)
plot(simResids)
glm.diag.plots(m0)
source("~/AEPFL/Master/Ma1/Regression_methods/Projet 1/regression-methods/Breakdowns/Breakdowns_diagnostics.R", echo=TRUE)
# Diagnostics
glm.diag.plots(nbmodel)
# Checking linearity
checklinearity(nbmodel$fitted.values,nbmodel$residuals)
# Checking the variance
checkvariance(nbmodel$fitted.values,nbmodel$residuals)
# QQ-plot
qqplot(nbmodel)
# Checking linearity
checklinearity(poissonmodel$fitted.values,poissonmodel$residuals)
# Checking the variance
checkvariance(poissonmodel$fitted.values,abs(poissonmodel$residuals))
# QQ-plot -->to change !
qqplot(poissonmodel)
library(ggplot2)
library('lme4')
library(MASS)
library(readr)
library(GGally)
library(boot)
library(glmmTMB)
source(file = "Breakdowns/Breakdowns_functions.R")
# Loading data set --------------------------------------------------------
load("Breakdowns/Breakdowns.RData")
# Modify the data set so that it make sense --> explanations in "Breakdowns_functions.R"
df <- mBreakdowns()
dff <- mBreakdowns2()
dfnb <- mBreakdowns2nb()
nbmodel <- glm.nb(Breakdowns ~ Tunnel + Slope + Direction + Year + HGV, data = dfnb)
# Test of dispersion
check_overdispersion(nbmodel)
install.packages("performance")
library(ggplot2)
library('lme4')
library(MASS)
library(readr)
library(GGally)
library(boot)
library(glmmTMB)
library(performance)
source(file = "Breakdowns/Breakdowns_functions.R")
# Test of dispersion
check_overdispersion(nbmodel)
# Poisson regression ------------------------------------------------------
poissonmodel <- glm(Breakdowns ~ Year + HGV + Slope + Limit + Traffic + Length +
Direction + Urban + Type + SlopeType + Tunnel,
family="poisson", data=dff)
# Test of dispersion
check_overdispersion(poissonmodel)
source("~/AEPFL/Master/Ma1/Regression_methods/Projet 1/regression-methods/Fires/Fires_models_Celine.R", echo=TRUE)
# Test of outliers
check_outliers(nbmodel)
# Test of outliers
check_outliers(m0)
?check_outliers
# General check
check_model(nbmodel)
# General check
check_model(nbmodel)
# General check
check_model(nbmodel)
check_distribution(nbmodel)
source("~/AEPFL/Master/Ma1/Regression_methods/Projet 1/regression-methods/Breakdowns/Breakdowns_diagnostics.R", echo=TRUE)
# Diagnostics
glm.diag.plots(nbmodel)
# Checking linearity
checklinearity(nbmodel$fitted.values,nbmodel$residuals)
# Checking the variance
checkvariance(nbmodel$fitted.values,nbmodel$residuals)
# QQ-plot
qqplot(nbmodel)
source("~/AEPFL/Master/Ma1/Regression_methods/Projet 1/regression-methods/Breakdowns/Breakdowns_models.R", echo=TRUE)
# Output: Step:  AIC=6475.58
# Breakdowns ~ Tunnel + Slope + Direction + Year + HGV
# Residual deviance: 1196.3  on  939  degrees of freedom
# Here we do a simple check
summary(nbmodel_e)
model <- glm.nb(Breakdowns~Slope + Direction + Year + HGV, data=dfnb)
summary(model)
model <- glm.nb(Breakdowns~Slope + Direction + HGV, data=dfnb)
summary(model)
model <- glm.nb(Breakdowns~Slope + Direction + Year + HGV + Traffic, data=dfnb)
summary(model)
model <- glm.nb(Breakdowns ~ Tunnel + Slope + Direction + Year + HGV, data=dfnb)
summary(model)
model <- glm.nb(Breakdowns ~ Tunnel + Slope + Direction + Year + HGV+Traffic, data=dfnb)
summary(model)
source("~/AEPFL/Master/Ma1/Regression_methods/Projet 1/regression-methods/Breakdowns/Breakdowns_diagnostics.R", echo=TRUE)
library(ggplot2)
library('lme4')
library(MASS)
library(readr)
library(GGally)
library(boot)
library(glmmTMB)
library(performance)
source(file = "Breakdowns/Breakdowns_functions.R")
source(file = "explo_diag_functions")
source(file = "regressionmethods/explo_diag_functions")
source(file = "regression-methods/explo_diag_functions")
source(file = "regression-methods/explo_diag_functions.R")
source(file = "explo_diag_functions.R")
source("~/AEPFL/Master/Ma1/Regression_methods/Projet 1/regression-methods/Breakdowns/Breakdowns_diagnostics.R", echo=TRUE)
source("~/AEPFL/Master/Ma1/Regression_methods/Projet 1/regression-methods/Fires/Fires_diagnostics.R", echo=TRUE)
source("~/AEPFL/Master/Ma1/Regression_methods/Projet 1/regression-methods/Fires/Fires_explo.R", echo=TRUE)
png(file="Fires/plots/fires_corr.png", pointsize = 14,
width=800, height=800)
suppressWarnings(pairs(~ Fires + Traffic + HGV + Slope + Limit + Length,
data=Fires, upper.panel = panel.cor, diag.panel = panel.hist))
dev.off()
source("~/AEPFL/Master/Ma1/Regression_methods/Projet 1/regression-methods/Fires/Fires_explo.R", echo=TRUE)
source("~/AEPFL/Master/Ma1/Regression_methods/Projet 1/regression-methods/Fires/Fires_explo.R", echo=TRUE)
source("~/AEPFL/Master/Ma1/Regression_methods/Projet 1/regression-methods/Fires/Fires_explo.R", echo=TRUE)
source("~/AEPFL/Master/Ma1/Regression_methods/Projet 1/regression-methods/Accidents/Accidents_explo.R", echo=TRUE)
png(file="Accidents/plots/accidents_ydensity.png", width=600, height=600)
ggplot(Accidents, aes(x=Accidents))+
geom_histogram(aes(y=..density..), alpha=0.4, position="identity", lwd=0.1)+
geom_density(alpha=0.3, lwd=1)+
xlab("Number of Accidents")+
ggtitle("Repartition of Accidents")+
theme(text = element_text(size = 20))
dev.off()
View(Accidents)
png(file="Accidents/plots/accidents_ydensity.png", width=600, height=600)
p<-data.frame(rexp(100,1/mean(Accidents$Acc)))
ggplot(p,aes(x=p[,1]))+
geom_histogram(aes(y=..density..), alpha=0.4, position="identity", lwd=0.1)+
geom_density(alpha=0.5, lwd=1, bw=0.5)+
xlab("Number of Accidents")+
ggtitle("Repartition of Accidents")+
theme(text = element_text(size = 20))
dev.off()
png(file="Accidents/plots/accidents_ycount.png", width=600, height=600)
ggplot(Accidents, aes(x=Accidents))+
geom_histogram(alpha=0.4, position="identity", lwd=0.1)+
xlab("Number of Accidents")+
ggtitle("Repartition of Accidents")+
theme(text = element_text(size = 20))
dev.off()
View(Accidents)
plot(Accidents$Acc)
plot(Accidents$Acc)
Accidents$Acc
png(file="Accidents/plots/accidents_ycount.png", width=600, height=600)
ggplot(Accidents, aes(x=Acc))+
geom_histogram(alpha=0.4, position="identity", lwd=0.1)+
xlab("Number of Accidents")+
ggtitle("Repartition of Accidents")+
theme(text = element_text(size = 20))
dev.off()
ggplot(Accidents,aes(x=Acc))+
geom_histogram(aes(y=..density..), alpha=0.4, position="identity", lwd=0.1)+
geom_density(alpha=0.5, lwd=1, bw=0.5)+
xlab("Number of Accidents")+
ggtitle("Repartition of Accidents")+
theme(text = element_text(size = 20))
png(file="Accidents/plots/accidents_ydensity.png", width=600, height=600)
ggplot(Accidents,aes(x=Acc))+
geom_histogram(aes(y=..density..), alpha=0.4, position="identity", lwd=0.1)+
geom_density(alpha=0.5, lwd=1, bw=0.5)+
xlab("Number of Accidents")+
ggtitle("Repartition of Accidents")+
theme(text = element_text(size = 20))
dev.off()
source("~/AEPFL/Master/Ma1/Regression_methods/Projet 1/regression-methods/Accidents/Accidents_explo.R", echo=TRUE)
source("~/AEPFL/Master/Ma1/Regression_methods/Projet 1/regression-methods/Accidents/Accidents_models_Celine.R", echo=TRUE)
plot(density(resid(model, type='pearson')))
dev.off()
dev.off()
model <- glm(Acc ~ log(Traffic) + SlopeType + log(Length) + Limit + Type +
Width + Direction + Slope + HGV + Year , family=poisson,
data=Accidents)
summary(model)
plot(density(resid(model, type='pearson')))
a= sum(resid(model, type='pearson'))
1-pchisq(a, model$df.residual)
model$df.residual
pchisq(28.6, 1146)
load("~/AEPFL/Master/Ma1/Regression_methods/Projet 1/regression-methods/Accidents/Accidents.RData")
View(Accidents)
mean(Accidents$Acc)
sd(Accidents$Acc)
y <- 0.5*sqrt(Accidents$Acc)
mean(y)
sd(y)
#In this file, we make diagnostics on the models we designed for Accidents
# Libraries and files -----------------------------------------------------
library(ggplot2)
library('lme4')
library(MASS)
library(readr)
library(GGally)
library(boot)
library(glmmTMB)
library(performance)
source(file = "Accidents/Accidents_functions.R")
source(file = "explo_diag_functions.R")
# Loading data set --------------------------------------------------------
load("Accidents/Accidents.RData")
model <- glm(Acc ~ log(Traffic) + SlopeType + log(Length) + Limit + Type +
Width + Direction + Slope + HGV + Year , family=poisson,
data=Accidents)
# Test of dispersion
check_overdispersion(model)
# Test of outliers
check_outliers(model)
# Diagnostics
png(file="Accidents/plots/accidents_diagnostics.png", width=600, height=600)
glm.diag.plots(model)
dev.off()
png(file="Accidents/plots/accidents_diagnostics1.png", width=600, height=600)
glm.diag.plots(model)
dev.off()
# Some other diagnostics, not to add in the final report.
# Checking linearity
checklinearity(model$fitted.values,model$residuals)
# Checking the variance
checkvariance(model$fitted.values,model$residuals)
# QQ-plot
qqplot(model)
fullmodel <- glm((Acc+1) ~ Lanes + Direction + log(Traffic) + HGV + Slope +
Urban + Type + log(Length) + Limit + SlopeType + Width + Lanes,
family=poisson, data=Accidents)
stepCriterion(fullmodel, criterion = 'aic', direction = c('forward', 'backward'))
library('glmtoolbox')
fullmodel <- glm((Acc+1) ~ Lanes + Direction + log(Traffic) + HGV + Slope +
Urban + Type + log(Length) + Limit + SlopeType + Width + Lanes,
family=poisson, data=Accidents)
stepCriterion(fullmodel, criterion = 'aic', direction = c('forward', 'backward'))
model <- stepCriterion(fullmodel, criterion = 'aic',
direction = c('forward', 'backward'))
source("~/AEPFL/Master/Ma1/Regression_methods/Projet 1/regression-methods/Accidents/Accidents_models_Celine.R", echo=TRUE)
#In this file, we make diagnostics on the models we designed for Accidents
# Libraries and files -----------------------------------------------------
library(ggplot2)
library('lme4')
library(MASS)
library(readr)
library(GGally)
library(boot)
library(glmmTMB)
library(performance)
source(file = "Accidents/Accidents_functions.R")
source(file = "explo_diag_functions.R")
# Loading data set --------------------------------------------------------
load("Accidents/Accidents.RData")
model2 <- glm(Acc~ log(Traffic) + SlopeType + log(Length) + Limit + Type +
Width + Direction + Slope + HGV, data = Accidents, family = poisson)
# Test of dispersion
check_overdispersion(model2)
# Test of outliers
check_outliers(model2)
png(file="Accidents/plots/accidents_diagnostics2.png", width=600, height=600)
glm.diag.plots(model2)
dev.off()
# Some other diagnostics, not to add in the final report.
# Checking linearity
checklinearity(model2$fitted.values,model$residuals)
# Some other diagnostics, not to add in the final report.
# Checking linearity
checklinearity(model2$fitted.values,model2$residuals)
# Checking the variance
checkvariance(model2$fitted.values,model2$residuals)
# QQ-plot
qqplot(model2)
# Some other diagnostics, not to add in the final report.
# Checking linearity
checklinearity(model2$fitted.values,model2$residuals)
png(file="Accidents/plots/accidents_diagnostics2.png", width=600, height=600)
glm.diag.plots(model2)
dev.off()
model3 <- glmer((Acc+1) ~ log(Traffic) + HGV + Urban + Type + log(Length) +
Limit + SlopeType + Width + (1 | Tunnel ), family=poisson ,
data = Accidents)
summary(model3)
summary(model2)
summary(model3)
# Test of dispersion --> there is over dispersion
check_overdispersion(model3)
# Test of outliers --> no outliers detected
check_outliers(model3)
png(file="Accidents/plots/accidents_diagnostics3.png", width=600, height=600)
glm.diag.plots(model3)
dev.off()
dev.off()
png(file="Accidents/plots/accidents_diagnostics3.png", width=600, height=600)
glm.diag.plots(model3)
dev.off()
# Some other diagnostics, not to add in the final report.
# Checking linearity
checklinearity(model2$fitted.values,model2$residuals)
# Some other diagnostics, not to add in the final report.
# Checking linearity
checklinearity(model3$fitted.values,model3$residuals)
png(file="Accidents/plots/accidents_diagnostics3.png", width=600, height=600)
resid_panel(model3)
dev.off()
library(ggResidpanel)
resid_panel(model3)
png(file="Accidents/plots/accidents_diagnostics3.png", width=600, height=600)
resid_panel(model3)
dev.off()
resid_panel(model2)
# In this file we proceed to all computations related to explorations on the
# Accidents data set.
# Libraries and files -----------------------------------------------------
library(ggplot2)
library("lme4")
library(MASS)
library(readr)
library(GGally)
library(DHARMa)
library('glmtoolbox')
source(file="Accidents/Accidents_functions.R")
# Loading data set --------------------------------------------------------
load("Accidents/Accidents.RData")
# Models ------------------------------------------------------------------
# Model 1 #####
model <- glm(Acc ~ log(Traffic) + SlopeType + log(Length) + Limit + Type +
Width + Direction + Slope + HGV + Year , family=poisson,
data=Accidents)
summary(model)
# Residual deviance: 3556.3  on 1146  degrees of freedom --> Maybe a problem of
# over dispersion
# AIC: 6057.6
plot(density(resid(model, type='pearson')))
a= sum(resid(model, type='pearson'))
1-pchisq(a, model$df.residual)
model$df.residual
pchisq(28.6, 1146)
knitr::opts_chunk$set(echo = FALSE)
knitr::opts_chunk$set(warning = FALSE)
knitr::opts_chunk$set(message = FALSE)
